/*
"[object Object]" = []+[]+{}
"undefined" = [][!+[]]+[]
"true" = [!+[]]+[]
"false" = [!!+[]]+[]
"NaN" = []+[]+(+{})
"Infinity" = []+[]+(+!+[]/+[])
"" = []+[]
"string" = typeof([]+[])
"number" = typeof(+[])

0 = +[]
1 = (+!+[])
6 = ((+!+[])+(+!+[]))*((+!+[])+(+!+[]))
5 = (+!+[]+[+[]])/((+!+[])+(+!+[]))
10 = (+!+[]+[+[]])
12 = ((+!+[])+[]+((+!+[])+(+!+[])))

//Need to look at the fromCharCode function. Add this in, make the numbers then convert. Job Done!
*/

var SMH = {}
SMH.upTheBracket = function() {
	var lookup = {
		a: '([!!+[]]+[])[(+!+[])]',
		b: '([]+[]+{})[(+!+[])+(+!+[])]',
		c: '([]+[]+{})[(+!+[]+[+[]])/((+!+[])+(+!+[]))]',
		d: '([][!+[]]+[])[(+!+[])+(+!+[])]',
		e: '([!+[]]+[])[((+!+[])+(+!+[])+(+!+[]))]',
		f: '([!!+[]]+[])[+[]]',
		g: '(typeof([]+[]))[(+!+[]+[+[]])/((+!+[])+(+!+[]))]',
		h: '\'h\' ',
		i: '([]+[]+(+!+[]/+[]))[(+!+[]+[+[]])/((+!+[])+(+!+[]))]',
		j: '(([]+[]+{}))[((+!+[])+(+!+[])+(+!+[]))]',
		k: '\'k\'',
		l: '([!!+[]]+[])[(+!+[])+(+!+[])]',
		m: '(typeof(+[]))[((+!+[])+(+!+[]))]',
		n: '([]+[]+(+!+[]/+[]))[(+!+[])]',
		o: '([]+[]+{})[(+!+[])]',
		p: '\'p\'',
		q: '\'q\'',
		r: '([!+[]]+[])[(+!+[])]',
		s: '([!!+[]]+[])[((+!+[])+(+!+[])+(+!+[]))]',
		t: '([!+[]]+[])[+[]]',
		u: '([][!+[]]+[])[+[]]',
		v: '\'v\'',
		w: '\'w\'',
		x: '\'x\'',
		y: '(([!+[]]+[])+([]+[]+(+!+[]/+[])))[(+!+[])+[]+(+!+[])]',
		z: '\'z\'',
		space: '(([!!+[]]+[])+([]+[]+{}))[((+!+[])+[]+((+!+[])+(+!+[])))]'
	};
	
	return {
		convert: function(item) {
			var convertedString = '';
			var adder = '';
			
			for(var i=0, ii=item.length; i<ii; i++) {
				convertedString += adder + (lookup[item[i]] || lookup.space);
				adder = '+';
			}
			return convertedString;
		}
	}
}();